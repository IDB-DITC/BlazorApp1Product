@page "/edit/{catId:int}"
@inject ProductCategoryService service
@inject NavigationManager nav
@inject IJSRuntime JS


<EditForm Model="productCategory" OnValidSubmit="SaveData">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<div>
		<label for="name">Name:</label>
		<InputText id="name" class="form-control" required @bind-Value="productCategory.Name" />
		<ValidationMessage For="()=> productCategory.Name" />
	</div>
	<div>
		<InputFile class="form-control" accept="image/jpg,image/png, image/jpeg" OnChange="UserFileSelected" />


		@if (productCategory.ImagePath != null)
		{
			<div>
				<img src="@productCategory.ImagePath" style="width:300px" />
			</div>
		}
	</div>

	<table class="table table-active table-bordered table-hover">
		<tr>
			<th>Product Name</th>
			<th>Product Number</th>
			<th>Product Color</th>
			<th>
				<button type="button" class="btn btn-outline-info" @onclick="AddProduct">Add Product</button>
			</th>
		</tr>
		@* @for (int i = 0; i < productCategory.Products.Count; i++)
		{
			<tr>
				<td>

					<InputText id="name" class="form-control" @bind-Value="productCategory.Products[i].Name" />
					
				</td>
				<td>
					<InputText id="name" class="form-control" @bind-Value="productCategory.Products[i].ProductNumber" />
				</td>
				<td>
					<InputText id="name" class="form-control" @bind-Value="productCategory.Products[i].Color" />
				</td>
				<td>
					<button type="button" class="btn btn-outline-warning" @onclick="()=> DeleteProduct(productCategory.Products[i])">Delete</button>
				</td>
			</tr>
		} *@
		@foreach (var prod in productCategory.Products)
		{
			<tr>
				<td>
				
					<InputText id="name" class="form-control" @bind-Value="prod.Name" />
					<ValidationMessage For="()=> prod.Name" />
				</td>
				<td>
					<InputText id="name" class="form-control" @bind-Value="prod.ProductNumber" />
					<ValidationMessage For="()=> prod.ProductNumber" />
				</td>
				<td>
					<InputText id="name" class="form-control" @bind-Value="prod.Color" />
					<ValidationMessage For="()=> prod.Color" />
				</td>
				<td>
					<button type="button" class="btn btn-outline-warning" @onclick="()=> DeleteProduct(prod)">Delete</button>
				</td>
			</tr>


		}
	</table>

	<button type="submit" class="btn btn-outline-success">
		Save
	</button>
	<button type="button" class="btn btn-outline-danger" @onclick="DataDelete">
		Delete
	</button>
	<NavLink class="btn btn-outline-info" href="cat">
		Cancel
	</NavLink>
</EditForm>

@code {



	private async Task UserFileSelected(InputFileChangeEventArgs e)
	{
		var imageFile = e.File;

		if (imageFile != null)
		{
			//var resizedFile = await imageFile.RequestImageFileAsync(imageFile.ContentType, 300, 500);

			using (Stream stream = imageFile.OpenReadStream(imageFile.Size))
			{

				MemoryStream ms = new MemoryStream();

				await stream.CopyToAsync(ms);

				byte[] bytes = ms.ToArray();

				string base64 = Convert.ToBase64String(bytes);

				productCategory.ImageData = new ImageData(imageFile.Name, imageFile.ContentType, base64);

				//ImgUrl = $"data:{imageFile.ContentType};base64, {base64}";

				productCategory.ImagePath = $"data:{imageFile.ContentType};base64, {base64}";

				// productCategory.ImageData = ImgUrl;

			}
		}

	}



	[Parameter]
	public int catId { get; set; }


	private ProductCategory productCategory = new ProductCategory();


	// public CategoryEdit()
	// {
	// 	JS.InvokeVoidAsync("alert", "CategoryEdit CTOR!");
	// }
	// protected override void OnParametersSet()
	// {
	// 	JS.InvokeVoidAsync("alert", "OnParametersSet!");
	// 	base.OnParametersSet();
	// }
	// protected override async Task OnParametersSetAsync()
	// {
	// 	await JS.InvokeVoidAsync("alert", "OnParametersSetAsync!");
	// 	await base.OnParametersSetAsync();
	// }
	// protected override void OnInitialized()
	// {
	// 	JS.InvokeVoidAsync("alert", "OnInitialized!");
	// 	base.OnInitialized();
	// }
	protected override async Task OnInitializedAsync()
	{
		//await JS.InvokeVoidAsync("alert", "OnInitializedAsync!");
		this.productCategory = await this.service.GetProductCategory(catId);

		await base.OnInitializedAsync();
	}


	

	// protected override void OnAfterRender(bool firstRender)
	// {
	// 	JS.InvokeVoidAsync("alert", $"OnAfterRender firstRender={firstRender}");
	// 	base.OnAfterRender(firstRender);
	// }
	// protected override async Task OnAfterRenderAsync(bool firstRender)
	// {
	// 	await JS.InvokeVoidAsync("alert", $"OnAfterRender firstRender={firstRender}");
	// 	await base.OnAfterRenderAsync(firstRender);
	// }


	// protected override bool ShouldRender()
	// {
	// 	JS.InvokeVoidAsync("alert", "ShouldRender!");
	// 	return base.ShouldRender();
	// }


	public async Task SaveData()
	{
		var response = await service.UpdateProductCategory(productCategory);

		if (response.IsSuccessStatusCode)
		{
			nav.NavigateTo("/cat");
		}


	}

	void AddProduct()
	{
		productCategory.Products.Add(new Product());
	}
	void DeleteProduct(Product item)
	{
		productCategory.Products.Remove(item);

	}

	async Task DataDelete()
	{
		var response = await service.DeleteProductCategory(catId);

		if (response.IsSuccessStatusCode)
		{
			nav.NavigateTo("/cat");
		}

	}


}
